// Timeline page functionality - T√≠nh to√°n th·ªùi gian ch√≠nh x√°c v√† hi·ªán ƒë·∫°i
document.addEventListener("DOMContentLoaded", function () {
    // Auth-guard.js ƒë√£ x·ª≠ l√Ω vi·ªác ki·ªÉm tra x√°c th·ª±c
    initializeTimeline();
    updateAllCounters();
    loadTimelineEvents();
    setupModal();
    setupScrollAnimations();
    
    // Update counters every second with smooth animation
    setInterval(updateAllCounters, 1000);
    
    // Add intersection observer for scroll animations
    observeElements();
});

// Initialize timeline functionality
function initializeTimeline() {
    console.log("Timeline initialized with enhanced features");
    document.documentElement.style.visibility = 'visible';
    document.documentElement.style.opacity = '1';
}

// Important dates - Ch√≠nh x√°c theo y√™u c·∫ßu v·ªõi th√¥ng tin chi ti·∫øt
const IMPORTANT_DATES = {
    // Sinh nh·∫≠t Bang - 28/10/2002 (23/09/2002 √¢m l·ªãch)
    bangBirthday: new Date("2002-10-28"),
    bangBirthdayLunar: "23/09/2002 √¢m l·ªãch",
    // Sinh nh·∫≠t Duy√™n - 08/10/2003
    duyenBirthday: new Date("2003-10-08"),
    // L·∫ßn ƒë·∫ßu g·∫∑p nhau - 08/02/2025
    firstMeet: new Date("2025-02-08"),
    // Tin nh·∫Øn ƒë·∫ßu ti√™n - 09/02/2025
    firstMessage: new Date("2025-02-09"),
    // ƒê·ªïi m√†u mess - 28/02/2025
    changeMessColor: new Date("2025-02-28"),
    // First dates
    firstDate1: new Date("2025-03-06"),
    firstDate2: new Date("2025-03-12"),
    firstDate3: new Date("2025-03-15"),
    firstDate4: new Date("2025-03-22"),
    // Ch√≠nh th·ª©c th√†nh ng∆∞·ªùi y√™u - 23/03/2025 19h30
    officialCouple: new Date("2025-03-23T19:30:00"),
    // Ng√†y chu·ªôc l·ªói - 24/04/2025
    makeUpDay: new Date("2025-04-24")
};

// Update all counters with smooth animation
function updateAllCounters() {
    updateLoveCounter();
    updateBirthdayCounters();
    updateDaysCounters();
    updateMilestoneCountdowns();
}

// Update love counter with years, months, days, hours, minutes, seconds
function updateLoveCounter() {
    const now = new Date();
    const loveStart = IMPORTANT_DATES.officialCouple;
    
    if (now < loveStart) {
        // N·∫øu ch∆∞a t·ªõi ng√†y y√™u
        const timeDiff = loveStart - now;
        const days = Math.floor(timeDiff / (1000 * 60 * 60 * 24));
        const hours = Math.floor((timeDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((timeDiff % (1000 * 60)) / 1000);
        
        animateCounter("totalYears", 0);
        animateCounter("totalMonths", 0);
        animateCounter("totalDays", days);
        animateCounter("totalHours", hours);
        animateCounter("totalMinutes", minutes);
        animateCounter("totalSeconds", seconds);
        
        // Progress bar (0% n·∫øu ch∆∞a y√™u)
        document.getElementById("progressFill").style.width = "0%";
        return;
    }
    
    const timeDiff = now - loveStart;
    
    // T√≠nh to√°n chi ti·∫øt h∆°n
    const totalSeconds = Math.floor(timeDiff / 1000);
    const totalMinutes = Math.floor(totalSeconds / 60);
    const totalHours = Math.floor(totalMinutes / 60);
    const totalDays = Math.floor(totalHours / 24);
    const totalMonths = Math.floor(totalDays / 30.44); // Average days per month
    const totalYears = Math.floor(totalDays / 365.25); // Account for leap years
    
    // Ph·∫ßn d∆∞ ƒë·ªÉ hi·ªÉn th·ªã
    const years = totalYears;
    const months = totalMonths % 12;
    const days = totalDays % Math.floor(30.44);
    const hours = totalHours % 24;
    const minutes = totalMinutes % 60;
    const seconds = totalSeconds % 60;
    
    animateCounter("totalYears", years);
    animateCounter("totalMonths", months);
    animateCounter("totalDays", days);
    animateCounter("totalHours", hours);
    animateCounter("totalMinutes", minutes);
    animateCounter("totalSeconds", seconds);
    
    // Progress towards 1000 days
    const progressPercent = Math.min((totalDays / 1000) * 100, 100);
    document.getElementById("progressFill").style.width = progressPercent + "%";
}

// Animate counter numbers
function animateCounter(elementId, newValue) {
    const element = document.getElementById(elementId);
    if (!element) return;
    
    const currentValue = parseInt(element.textContent) || 0;
    if (currentValue !== newValue) {
        element.textContent = newValue;
        element.style.transform = 'scale(1.1)';
        setTimeout(() => {
            element.style.transform = 'scale(1)';
        }, 150);
    }
}

// Update birthday counters and ages
function updateBirthdayCounters() {
    const now = new Date();
    const currentYear = now.getFullYear();
    
    // T√≠nh tu·ªïi Bang
    let bangAge = currentYear - IMPORTANT_DATES.bangBirthday.getFullYear();
    const bangBirthdayThisYear = new Date(currentYear, IMPORTANT_DATES.bangBirthday.getMonth(), IMPORTANT_DATES.bangBirthday.getDate());
    if (now < bangBirthdayThisYear) {
        bangAge--;
    }
    
    // T√≠nh tu·ªïi Duy√™n
    let duyenAge = currentYear - IMPORTANT_DATES.duyenBirthday.getFullYear();
    const duyenBirthdayThisYear = new Date(currentYear, IMPORTANT_DATES.duyenBirthday.getMonth(), IMPORTANT_DATES.duyenBirthday.getDate());
    if (now < duyenBirthdayThisYear) {
        duyenAge--;
    }
    
    animateCounter("bangAge", bangAge);
    animateCounter("duyenAge", duyenAge);
    
    // T√≠nh ng√†y sinh nh·∫≠t ti·∫øp theo
    const nextBangBirthday = now < bangBirthdayThisYear ? bangBirthdayThisYear : new Date(currentYear + 1, IMPORTANT_DATES.bangBirthday.getMonth(), IMPORTANT_DATES.bangBirthday.getDate());
    const nextDuyenBirthday = now < duyenBirthdayThisYear ? duyenBirthdayThisYear : new Date(currentYear + 1, IMPORTANT_DATES.duyenBirthday.getMonth(), IMPORTANT_DATES.duyenBirthday.getDate());
    
    const daysToBangBirthday = Math.ceil((nextBangBirthday - now) / (1000 * 60 * 60 * 24));
    const daysToDuyenBirthday = Math.ceil((nextDuyenBirthday - now) / (1000 * 60 * 60 * 24));
      animateCounter("bangNextBirthday", daysToBangBirthday);
    animateCounter("duyenNextBirthday", daysToDuyenBirthday);
}

// Update days since important events
function updateDaysCounters() {
    const now = new Date();
    
    // Days since first meet
    const daysSinceFirstMeet = Math.floor((now - IMPORTANT_DATES.firstMeet) / (1000 * 60 * 60 * 24));
    document.getElementById("daysSinceFirstMeet").textContent = Math.max(0, daysSinceFirstMeet);
    
    // Days since first message
    const daysSinceFirstMessage = Math.floor((now - IMPORTANT_DATES.firstMessage) / (1000 * 60 * 60 * 24));
    document.getElementById("daysSinceFirstMessage").textContent = Math.max(0, daysSinceFirstMessage);
}

// Enhanced milestone countdowns with multiple milestones
function updateMilestoneCountdowns() {
    const now = new Date();
    const loveStart = IMPORTANT_DATES.officialCouple;
    
    // Array of milestones
    const milestones = [
        { days: 30, elementId: "milestone30days", countdownId: "countdown30days" },
        { days: 50, elementId: "milestone50days", countdownId: "countdown50days" },
        { days: 100, elementId: "milestone100days", countdownId: "countdown100days" },
        { days: 200, elementId: "milestone200days", countdownId: "countdown200days" },
        { days: 365, elementId: "milestone365days", countdownId: "countdown365days" },
        { days: 500, elementId: "milestone500days", countdownId: "countdown500days" },
        { days: 1000, elementId: "milestone1000days", countdownId: "countdown1000days" }
    ];
    
    milestones.forEach(milestone => {
        const milestoneDate = new Date(loveStart.getTime() + (milestone.days * 24 * 60 * 60 * 1000));
        const milestoneElement = document.getElementById(milestone.elementId);
        const countdownElement = document.getElementById(milestone.countdownId);
        
        if (milestoneElement && countdownElement) {
            milestoneElement.textContent = formatDate(milestoneDate);
            
            if (now < milestoneDate) {
                const daysToMilestone = Math.ceil((milestoneDate - now) / (1000 * 60 * 60 * 24));
                countdownElement.textContent = `C√≤n ${daysToMilestone} ng√†y`;
                countdownElement.style.color = "";
            } else {
                countdownElement.textContent = "ƒê√£ qua ‚úì";
                countdownElement.style.color = "#48bb78";
                
                // Mark milestone card as achieved
                const milestoneCard = countdownElement.closest('.milestone-card');
                if (milestoneCard) {
                    milestoneCard.classList.remove('upcoming');
                    milestoneCard.classList.add('achieved');
                }
            }
        }
    });
      // 1 year milestone
    const milestone1Year = new Date(loveStart.getFullYear() + 1, loveStart.getMonth(), loveStart.getDate(), loveStart.getHours(), loveStart.getMinutes());
    const countdown1YearElement = document.getElementById("countdown1year");
    
    if (countdown1YearElement) {
        if (now < milestone1Year) {
            const daysTo1Year = Math.ceil((milestone1Year - now) / (1000 * 60 * 60 * 24));
            countdown1YearElement.textContent = `C√≤n ${daysTo1Year} ng√†y`;
            countdown1YearElement.style.color = "";
        } else {
            countdown1YearElement.textContent = "ƒê√£ qua ‚úì";
            countdown1YearElement.style.color = "#48bb78";
        }
    }
}

// Timeline events data - Enhanced v·ªõi n·ªôi dung chi ti·∫øt h∆°n
const timelineEvents = [
    {
        id: 1,
        date: "2025-02-08",
        title: "L·∫ßn ƒê·∫ßu G·∫∑p Nhau üë´",
        description: "Ng√†y ƒë·ªãnh m·ªánh - ch√∫ng m√¨nh g·∫∑p nhau l·∫ßn ƒë·∫ßu ti√™n t·∫°i vƒÉn ph√≤ng",
        icon: "üë´",
        story: "M·ªôt cu·ªôc g·∫∑p g·ª° ƒë·ªãnh m·ªánh ƒë√£ thay ƒë·ªïi cu·ªôc ƒë·ªùi c·∫£ hai. Em l√† con b√© chi·ªÅu h√¥m qua m·ªõi qua vƒÉn ph√≤ng ch√†o m·ªçi ng∆∞·ªùi. Ai ng·ªù ƒë√≥ l·∫°i l√† kh·ªüi ƒë·∫ßu cho m·ªôt c√¢u chuy·ªán t√¨nh y√™u ƒë·∫πp nh∆∞ c·ªï t√≠ch..."
    },
    {
        id: 2,
        date: "2025-02-09",
        title: "Tin Nh·∫Øn ƒê·∫ßu Ti√™n üí¨",
        description: "\"Anh ∆°i, e l√† con b√© chi·ªÅu h√¥m qua m·ªõi qua vƒÉn ph√≤ng ch√†o mn √°. E h·ªèi anh c√°i n√†y x√≠u\"",
        icon: "üí¨",
        story: "Tin nh·∫Øn ƒë·∫ßu ti√™n c·ªßa em ƒë√£ m·ªü ra c√°nh c·ª≠a cho t√¨nh y√™u c·ªßa ch√∫ng m√¨nh. M·ªôt c√¢u h·ªèi ƒë∆°n gi·∫£n nh∆∞ng ƒë√£ k·∫øt n·ªëi hai tr√°i tim, b·∫Øt ƒë·∫ßu nh·ªØng cu·ªôc tr√≤ chuy·ªán kh√¥ng bao gi·ªù mu·ªën k·∫øt th√∫c."
    },
    {
        id: 3,
        date: "2025-02-28",
        title: "ƒê·ªïi M√†u Mess üé®",
        description: "Ng√†y anh ƒë·ªïi m√†u tin nh·∫Øn - d·∫•u hi·ªáu ƒë·∫ßu ti√™n c·ªßa t√¨nh c·∫£m ƒë·∫∑c bi·ªát",
        icon: "üé®",
        story: "M·ªôt c·ª≠ ch·ªâ nh·ªè nh∆∞ng c√≥ √Ω nghƒ©a l·ªõn. C·∫£ hai ƒë·ªÅu c·∫£m nh·∫≠n ƒë∆∞·ª£c s·ª± kh√°c bi·ªát trong m·ªëi quan h·ªá. Anh nghi√™m t√∫c."
    },
    {
        id: 4,
        date: "2025-03-06",
        title: "First Date #1 üíù",
        description: "Cu·ªôc h·∫πn h√≤ ƒë·∫ßu ti√™n c·ªßa ch√∫ng ta",
        icon: "üíù",
        story: "Bu·ªïi h·∫πn ƒë·∫ßu ti√™n ƒë·∫ßy ·∫Øp nh·ªØng c·∫£m x√∫c m·ªõi m·∫ª v√† h·ªìi h·ªôp. Anh d·∫Øt e ƒëi ƒÉn m√≥n Th√°i d·ªü ·∫πc :))). Xong d·∫Øt e ƒëi b·∫Øn cung,..."
    },
    {
        id: 5,
        date: "2025-03-12",
        title: "Date #2 üíï",
        description: "Cu·ªôc h·∫πn th·ª© hai ng√†y c√†ng g·∫ßn nhau h∆°n",
        icon: "üíï",
        story: "Ch√∫ng ta ng√†y c√†ng hi·ªÉu nhau h∆°n qua nh·ªØng cu·ªôc tr√≤ chuy·ªán s√¢u s·∫Øc. T√¨nh c·∫£m b·∫Øt ƒë·∫ßu n·∫£y n·ªü."
    },
    {
        id: 6,
        date: "2025-03-15",
        title: "Date #3 üíñ",
        description: "Cu·ªôc h·∫πn th·ª© ba v·ªõi nhi·ªÅu c·∫£m x√∫c",
        icon: "üíñ",
        story: "T√¨nh c·∫£m gi·ªØa hai ta ng√†y c√†ng s√¢u ƒë·∫≠m v√† r√µ r√†ng h∆°n. C·∫£ hai ƒë·ªÅu c·∫£m nh·∫≠n ƒë∆∞·ª£c ƒëi·ªÅu g√¨ ƒë√≥ ƒë·∫∑c bi·ªát."
    },
    {
        id: 7,
        date: "2025-03-22",
        title: "Date #4 üåπ",
        description: "Cu·ªôc h·∫πn cu·ªëi c√πng tr∆∞·ªõc khi tr·ªü th√†nh ng∆∞·ªùi y√™u",
        icon: "üåπ",
        story: "Bu·ªïi h·∫πn cu·ªëi c√πng tr∆∞·ªõc khi anh ch√≠nh th·ª©c t·ªè t√¨nh v·ªõi em."
    },
    {
        id: 8,
        date: "2025-03-23",
        title: "Ch√≠nh Th·ª©c Th√†nh Ng∆∞·ªùi Y√™u ‚ù§Ô∏è",
        description: "Ng√†y thi√™ng li√™ng nh·∫•t - anh t·ªè t√¨nh v√† em ƒë·ªìng √Ω",
        icon: "‚ù§Ô∏è",
        story: "\"Em ƒë·ªìng √Ω l√†m ng∆∞·ªùi y√™u anh nha\" - C√¢u tr·∫£ l·ªùi l√†m anh h·∫°nh ph√∫c nh·∫•t ƒë·ªùi. T·ª´ ƒë√¢y, ch√∫ng ta ch√≠nh th·ª©c b·∫Øt ƒë·∫ßu h√†nh tr√¨nh t√¨nh y√™u.",
        special: true
    },
    {
        id: 9,
        date: "2025-04-24",
        title: "Ng√†y Chu·ªôc L·ªói ƒê·∫∑c Bi·ªát ü§≠",
        description: "Ng√†y anh th√™m v√†o l·ªãch ƒë·ªÉ chu·ªôc l·ªói v√¨ nh·∫ßm",
        icon: "ü§≠",
        story: "\"B·ªã c√°o ƒë·ªÅ ngh·ªã th√™m m·ªôt ng√†y 24 v√†o l·ªãch l√† ng√†y chu·ªôc l·ªói n·ªØa :)))\" M·ªôt ng√†y ƒë·∫∑c bi·ªát ch·ªâ c√≥ c·ªßa ri√™ng ch√∫ng m√¨nh."
    }
];

// Load timeline events
function loadTimelineEvents() {
    const timelineContainer = document.getElementById("timelineEvents");
    if (!timelineContainer) return;
    
    timelineContainer.innerHTML = "";
    
    // Sort events by date
    timelineEvents.sort((a, b) => new Date(a.date) - new Date(b.date));
    
    timelineEvents.forEach((event, index) => {
        const eventElement = createTimelineEvent(event, index);
        timelineContainer.appendChild(eventElement);
    });
}

// Create timeline event element
function createTimelineEvent(event, index) {
    const eventDiv = document.createElement("div");    eventDiv.className = `timeline-event${event.special ? ' special' : ''}`;
    eventDiv.dataset.eventId = event.id;
    
    var formattedDate = formatDate(event.date);
    if (formattedDate == "Invalid Date") {
        formattedDate = 'K√Ω ·ª©c';
    }
    
    eventDiv.innerHTML = `
        <div class="event-marker" onclick="showEventModal(${event.id})">
            ${event.icon}
        </div>
        <div class="event-content" onclick="showEventModal(${event.id})">
            <div class="event-date">${formattedDate}</div>
            <h3 class="event-title">${event.title}</h3>
            <p class="event-description">${event.description}</p>
        </div>
    `;
    
    return eventDiv;
}

// Show event modal
function showEventModal(eventId) {
    const event = timelineEvents.find(e => e.id === eventId);
    if (!event) return;
    
    const modal = document.getElementById("eventModal");
    const modalTitle = document.getElementById("modalTitle");
    const modalDate = document.getElementById("modalDate");
    const modalDescription = document.getElementById("modalDescription");
    const modalStory = document.getElementById("modalStory");
    
    if (modal && modalTitle && modalDate && modalDescription && modalStory) {
        modalTitle.textContent = event.title;
        modalDate.textContent = formatDate(event.date);
        modalDescription.textContent = event.description;
        modalStory.textContent = event.story;
        
        modal.style.display = "block";
    }
}

// Setup modal functionality
function setupModal() {
    const modal = document.getElementById("eventModal");
    const closeBtn = document.getElementById("closeModal");
    
    if (closeBtn) {
        closeBtn.onclick = function() {
            modal.style.display = "none";
        };
    }
    
    if (modal) {
        window.onclick = function(event) {
            if (event.target === modal) {
                modal.style.display = "none";
            }
        };
    }
}

// Setup scroll animations
function setupScrollAnimations() {
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('visible');
            }
        });
    }, observerOptions);
    
    // Observe timeline events
    const timelineEvents = document.querySelectorAll('.timeline-event');
    timelineEvents.forEach(event => {
        observer.observe(event);
    });
    
    // Observe other animated elements
    const animatedElements = document.querySelectorAll('.love-counter-card, .date-card, .milestone-card');
    animatedElements.forEach(element => {
        observer.observe(element);
    });
}

// Utility functions
function formatDate(dateString) {
    const date = new Date(dateString);
    const options = {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    };
    return date.toLocaleDateString('vi-VN', options);
}

// Export functions for global access
window.showEventModal = showEventModal;